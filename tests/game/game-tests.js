#!/usr/bin/env node

// Vlastn√≠ test runner pro hern√≠ logiku s ES6 modules
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get current directory for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Nastaven√≠ logov√°n√≠ do souboru
const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
const logFile = path.join(__dirname, '../../logs/tests/game-' + timestamp + '.log');
const originalConsoleLog = console.log;
console.log = function(...args) {
    const message = args.join(' ') + '\n';
    fs.appendFileSync(logFile, message);
    originalConsoleLog(...args);
};

// Vytvo≈ôit adres√°≈ô pro logy pokud neexistuje
const logDir = path.dirname(logFile);
if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
}

// Vymazat p≈ôedchoz√≠ log
if (fs.existsSync(logFile)) {
    fs.writeFileSync(logFile, '');
}

// Import t≈ô√≠d pro testov√°n√≠
import { PacMan } from '../../src/game/js/player.js';
import { Ghost } from '../../src/game/js/ghosts.js';
import { MapManager } from '../../src/game/js/map.js';
import { DIRECTIONS, CELL_SIZE } from '../../src/shared/constants.js';

// Mock JSDOM environment
import { JSDOM } from 'jsdom';
const dom = new JSDOM('<!DOCTYPE html><div id="game-board"></div>');
global.document = dom.window.document;
global.window = dom.window;
global.HTMLElement = dom.window.HTMLElement;
global.HTMLCanvasElement = dom.window.HTMLCanvasElement;

// Mock Canvas context
dom.window.HTMLCanvasElement.prototype.getContext = function(type) {
    if (type === '2d') {
        return {
            fillStyle: '',
            strokeStyle: '',
            fillRect: () => {},
            strokeRect: () => {},
            clearRect: () => {},
            fillText: () => {},
            beginPath: () => {},
            moveTo: () => {},
            lineTo: () => {},
            arc: () => {},
            fill: () => {},
            stroke: () => {},
            save: () => {},
            restore: () => {},
            translate: () => {},
            rotate: () => {},
            scale: () => {}
        };
    }
    return null;
};

console.log(`üß™ Testov√°n√≠ hern√≠ logiky PacMan`);
console.log(`üìã Test runner: Vlastn√≠ ES6 runner s JSDOM`);
console.log(`üìù Log soubor: ${logFile}`);
console.log('');

// Test counter
let testsPassed = 0;
let testsFailed = 0;
const failures = [];

// Helper functions
function assert(condition, message) {
    if (condition) {
        console.log(`‚úÖ ${message}`);
        testsPassed++;
        return true;
    } else {
        console.log(`‚ùå ${message}`);
        testsFailed++;
        failures.push(message);
        return false;
    }
}

function assertEqual(actual, expected, message) {
    return assert(actual === expected, `${message} (expected: ${expected}, actual: ${actual})`);
}

function createMockGameBoard() {
    const gameBoard = document.getElementById('game-board');
    return {
        appendChild: () => {},
        removeChild: () => {},
        querySelector: () => null,
        style: {},
        getBoundingClientRect: () => ({ left: 0, top: 0, width: 600, height: 400 }),
        ...gameBoard
    };
}

function createSimpleMap() {
    // Jednoduch√° 5x5 mapa pro testov√°n√≠ (PacMan form√°t)
    return [
        [0, 0, 0, 0, 0],  // ≈ô√°dek 0: sam√© teƒçky (0 = teƒçka)
        [0, 2, 2, 2, 0],  // ≈ô√°dek 1: teƒçky po stran√°ch, sebran√© uprost≈ôed
        [0, 2, 2, 2, 0],  // ≈ô√°dek 2: PacMan uprost≈ôed
        [0, 2, 2, 2, 0],  // ≈ô√°dek 3
        [0, 0, 3, 0, 0]   // ≈ô√°dek 4: teƒçky a power pellet uprost≈ôed (3)
    ];
}

function createMapWithWalls() {
    // Mapa se zdmi pro testov√°n√≠ koliz√≠ (PacMan form√°t: 1 = zeƒè)
    return [
        [0, 1, 0, 0, 0],  // ≈ô√°dek 0: zeƒè na [0][1]
        [1, 0, 0, 0, 0],  // ≈ô√°dek 1: zeƒè na [1][0]
        [0, 0, 0, 0, 1],  // ≈ô√°dek 2: zeƒè na [2][4]
        [0, 0, 1, 0, 0],  // ≈ô√°dek 3: zeƒè na [3][2]
        [0, 0, 0, 0, 0]   // ≈ô√°dek 4: pr√°zdn√Ω
    ];
}

// ============================================================
// TEST 1: PacMan inicializace a z√°kladn√≠ funkce
// ============================================================
console.log('\n' + '='.repeat(60));
console.log('TEST 1: PacMan - Inicializace a z√°kladn√≠ funkce');
console.log('='.repeat(60));

function testPacManInitialization() {
    console.log('\nüîÑ Test PacMan inicializace...');
    
    const mockGameBoard = createMockGameBoard();
    const mockMap = createSimpleMap();
    const mockCallbacks = {
        updateDotDisplay: () => {},
        updateScore: () => {},
        activateFrightenedMode: () => {},
        checkWin: () => {}
    };
    
    const pacman = new PacMan(2, 2, mockGameBoard, mockMap, mockCallbacks);
    
    // PacMan pou≈æ√≠v√° gridX/gridY m√≠sto x/y
    assertEqual(pacman.gridX, 2, 'PacMan gridX pozice spr√°vnƒõ inicializov√°na');
    assertEqual(pacman.gridY, 2, 'PacMan gridY pozice spr√°vnƒõ inicializov√°na');
    assertEqual(pacman.pixelX, 2 * CELL_SIZE, 'PacMan pixelX pozice spr√°vnƒõ inicializov√°na');
    assertEqual(pacman.pixelY, 2 * CELL_SIZE, 'PacMan pixelY pozice spr√°vnƒõ inicializov√°na');
    assertEqual(pacman.direction, null, 'PacMan smƒõr inicializov√°n jako null');
    assertEqual(pacman.nextDirection, null, 'PacMan dal≈°√≠ smƒõr inicializov√°n jako null');
    
    // Test vytvo≈ôen√≠ elementu
    pacman.create();
    assert(pacman.element !== null, 'PacMan element vytvo≈ôen');
    
    console.log(`üìç PacMan vytvo≈ôen na pozici [${pacman.gridX}, ${pacman.gridY}] (pixel: [${pacman.pixelX}, ${pacman.pixelY}]) se smƒõrem ${pacman.direction}`);
}

// ============================================================
// TEST 2: PacMan pohyb
// ============================================================
console.log('\n' + '='.repeat(60));
console.log('TEST 2: PacMan - Pohybov√© testy');
console.log('='.repeat(60));

function testPacManMovement() {
    console.log('\nüîÑ Test PacMan pohyb...');
    
    const mockGameBoard = createMockGameBoard();
    const mockMap = createSimpleMap();
    
    const mockCallbacks = {
        updateDotDisplay: (x, y) => {
            console.log(`üìç updateDotDisplay zavol√°n pro pozici [${x}, ${y}]`);
        },
        updateScore: (points) => {
            console.log(`üéØ updateScore zavol√°n s ${points} body`);
        },
        activateFrightenedMode: () => {},
        checkWin: () => {}
    };
    
    const pacman = new PacMan(2, 2, mockGameBoard, mockMap, mockCallbacks);
    pacman.create();
    
    // Test nastaven√≠ smƒõru doprava
    console.log('\nüìç Test nastaven√≠ smƒõru doprava...');
    const originalGridX = pacman.gridX;
    pacman.nextDirection = DIRECTIONS.RIGHT;
    
    // Pro testov√°n√≠ pohybu nastav√≠m i direction p≈ô√≠mo
    pacman.direction = DIRECTIONS.RIGHT;
    
    // Simulace pohybu - v re√°ln√© h≈ôe se vol√° opakovanƒõ
    for (let i = 0; i < 10; i++) {
        pacman.move();
        if (pacman.gridX !== originalGridX) break;
    }
    
    assert(pacman.gridX >= originalGridX, 'PacMan se posunul doprava nebo z≈Østal na m√≠stƒõ');
    console.log(`üìç PacMan pozice po pohybu doprava: [${pacman.gridX}, ${pacman.gridY}]`);
    
    // Test nastaven√≠ smƒõru doleva
    console.log('\nüìç Test nastaven√≠ smƒõru doleva...');
    const currentGridX = pacman.gridX;
    pacman.nextDirection = DIRECTIONS.LEFT;
    pacman.direction = DIRECTIONS.LEFT;
    
    for (let i = 0; i < 10; i++) {
        pacman.move();
        if (pacman.gridX !== currentGridX) break;
    }
    
    assert(pacman.gridX <= currentGridX, 'PacMan se posunul doleva nebo z≈Østal na m√≠stƒõ');
    console.log(`üìç PacMan pozice po pohybu doleva: [${pacman.gridX}, ${pacman.gridY}]`);
    
    // Test z√°kladn√≠ho API pro nastaven√≠ smƒõr≈Ø
    console.log('\nüìç Test API pro nastaven√≠ smƒõr≈Ø...');
    pacman.nextDirection = DIRECTIONS.UP;
    assertEqual(pacman.nextDirection, DIRECTIONS.UP, 'Smƒõr nahoru spr√°vnƒõ nastaven');
    
    pacman.nextDirection = DIRECTIONS.DOWN;
    assertEqual(pacman.nextDirection, DIRECTIONS.DOWN, 'Smƒõr dol≈Ø spr√°vnƒõ nastaven');
}

// ============================================================
// TEST 3: PacMan sb√≠r√°n√≠ teƒçek
// ============================================================
console.log('\n' + '='.repeat(60));
console.log('TEST 3: PacMan - Sb√≠r√°n√≠ teƒçek');
console.log('='.repeat(60));

function testPacManDotCollection() {
    console.log('\nüîÑ Test PacMan sb√≠r√°n√≠ teƒçek...');
    
    const mockGameBoard = createMockGameBoard();
    const mockMap = createSimpleMap();
    let scorePoints = 0;
    let dotPosition = null;
    let frightenedActivated = false;
    
    const mockCallbacks = {
        updateDotDisplay: (x, y) => {
            dotPosition = {x, y};
            console.log(`üü° Teƒçka sebr√°na na pozici [${x}, ${y}]`);
        },
        updateScore: (points) => {
            scorePoints += points;
            console.log(`üéØ Sk√≥re aktualizov√°no: +${points} bod≈Ø (celkem: ${scorePoints})`);
        },
        activateFrightenedMode: () => {
            frightenedActivated = true;
            console.log(`üëª Frightened mode aktivov√°n!`);
        },
        checkWin: () => {}
    };
    
    // Test 1: Um√≠stit PacMana na pozici s norm√°ln√≠ teƒçkou
    console.log('\nüìç Test sebr√°n√≠ norm√°ln√≠ teƒçky...');
    const pacman = new PacMan(0, 0, mockGameBoard, mockMap, mockCallbacks);
    pacman.create();
    
    console.log(`üìç PacMan um√≠stƒõn na [0, 0], hodnota mapy: ${mockMap[0][0]}`);
    assert(mockMap[0][0] === 0, 'Na pozici [0,0] je teƒçka (hodnota 0)');
    
    // Simulace sebr√°n√≠ teƒçky p≈ô√≠mo vol√°n√≠m collectDot
    pacman.collectDot();
    
    assert(scorePoints === 10, `Sk√≥re aktualizov√°no po sebr√°n√≠ teƒçky (+10 bod≈Ø, celkem: ${scorePoints})`);
    assert(dotPosition !== null, 'updateDotDisplay byl zavol√°n');
    assertEqual(mockMap[0][0], 2, 'Teƒçka oznaƒçena jako sebran√° (hodnota 2)');
    
    if (dotPosition) {
        assertEqual(dotPosition.x, 0, 'Spr√°vn√° X pozice teƒçky');
        assertEqual(dotPosition.y, 0, 'Spr√°vn√° Y pozice teƒçky');
    }
    
    // Test 2: Power pellet
    console.log('\nüìç Test sebr√°n√≠ power pelletu...');
    const pacman2 = new PacMan(2, 4, mockGameBoard, mockMap, mockCallbacks);
    pacman2.create();
    
    console.log(`üìç PacMan2 um√≠stƒõn na [2, 4], hodnota mapy: ${mockMap[4][2]}`);
    assert(mockMap[4][2] === 3, 'Na pozici [2,4] je power pellet (hodnota 3)');
    
    const originalScore = scorePoints;
    frightenedActivated = false;
    
    pacman2.collectDot();
    
    assert(scorePoints === originalScore + 50, `Sk√≥re aktualizov√°no po power pelletu (+50 bod≈Ø)`);
    assert(frightenedActivated === true, 'Frightened mode byl aktivov√°n');
    assertEqual(mockMap[4][2], 2, 'Power pellet oznaƒçen jako sebran√Ω');
    
    // Test 3: Pr√°zdn√© pol√≠ƒçko (u≈æ sebran√° teƒçka)
    console.log('\nüìç Test pr√°zdn√©ho pol√≠ƒçka...');
    const pacman3 = new PacMan(1, 1, mockGameBoard, mockMap, mockCallbacks);
    pacman3.create();
    
    const scoreBeforeEmpty = scorePoints;
    pacman3.collectDot();
    
    assertEqual(scorePoints, scoreBeforeEmpty, 'Na pr√°zdn√©m pol√≠ƒçku se sk√≥re nemƒõnilo');
}

// ============================================================
// TEST 4: PacMan kolizn√≠ detekce
// ============================================================
console.log('\n' + '='.repeat(60));
console.log('TEST 4: PacMan - Kolizn√≠ detekce');
console.log('='.repeat(60));

function testPacManCollisionDetection() {
    console.log('\nüîÑ Test PacMan kolizn√≠ detekce...');
    
    const mockGameBoard = createMockGameBoard();
    const mockMap = createMapWithWalls();
    
    const mockCallbacks = {
        updateDotDisplay: () => {},
        updateScore: () => {},
        activateFrightenedMode: () => {},
        checkWin: () => {}
    };
    
    // Um√≠stit PacMana na pozici [1,1] (bezpeƒçn√° pozice)
    const pacman = new PacMan(1, 1, mockGameBoard, mockMap, mockCallbacks);
    pacman.create();
    
    console.log('üìç Mapa s p≈ôek√°≈ækami:');
    mockMap.forEach((row, y) => {
        const rowStr = row.map(val => val.toString().padStart(2)).join(' ');
        console.log(`   ${y}: ${rowStr}`);
    });
    
    // Test canMoveTo funkce pro r≈Øzn√© pozice
    console.log('\nüìç Test canMoveTo funkce...');
    
    // Test pohybu na zeƒè [0][1] 
    const canMoveToWall = pacman.canMoveTo(1, 0);
    assert(canMoveToWall === false, 'canMoveTo vrac√≠ false pro zeƒè na [0][1]');
    console.log(`üìç canMoveTo(1, 0) = ${canMoveToWall} (zeƒè)`);
    
    // Test pohybu na voln√© m√≠sto [2][1]
    const canMoveToEmpty = pacman.canMoveTo(2, 1);
    assert(canMoveToEmpty === true, 'canMoveTo vrac√≠ true pro voln√© m√≠sto na [1][2]');
    console.log(`üìç canMoveTo(2, 1) = ${canMoveToEmpty} (voln√©)`);
    
    // Test pohybu na zeƒè [1][0]
    const canMoveToLeftWall = pacman.canMoveTo(0, 1);
    assert(canMoveToLeftWall === false, 'canMoveTo vrac√≠ false pro zeƒè na [1][0]');
    console.log(`üìç canMoveTo(0, 1) = ${canMoveToLeftWall} (zeƒè)`);
    
    // Test funkce p≈ô√≠mo - simulace pohybu
    console.log('\nüìç Test praktick√© kolize...');
    
    // Simulace: PacMan na [2,2] se pokus√≠ j√≠t doprava na zeƒè [2][4]
    const pacman2 = new PacMan(3, 2, mockGameBoard, mockMap, mockCallbacks);
    pacman2.create();
    
    const canMoveRight = pacman2.canMoveTo(4, 2);
    assert(canMoveRight === false, 'PacMan nem≈Ø≈æe j√≠t doprava na zeƒè [2][4]');
    
    // Test hraniƒçn√≠ch p≈ô√≠pad≈Ø
    console.log('\nüìç Test hraniƒçn√≠ch p≈ô√≠pad≈Ø...');
    const canMoveOutOfBounds = pacman.canMoveTo(-1, 1);
    assert(canMoveOutOfBounds === true, 'Pohyb mimo mapu vlevo je povolen (teleportace)');
    
    const canMoveOutOfBoundsY = pacman.canMoveTo(1, -1);
    assert(canMoveOutOfBoundsY === false, 'Pohyb mimo mapu nahoru je zak√°z√°n');
}

// ============================================================
// Spu≈°tƒõn√≠ v≈°ech test≈Ø
// ============================================================

try {
    testPacManInitialization();
    testPacManMovement();
    testPacManDotCollection();
    testPacManCollisionDetection();
} catch (error) {
    console.log(`\nüí• Chyba p≈ôi spou≈°tƒõn√≠ test≈Ø: ${error.message}`);
    console.log(error.stack);
    testsFailed++;
    failures.push(`Test exception: ${error.message}`);
}

// ============================================================
// V√Ωsledky test≈Ø
// ============================================================
console.log('\n' + '='.repeat(60));
console.log('V√ùSLEDKY HERN√çCH TEST≈Æ');
console.log('='.repeat(60));

console.log(`‚úÖ √öspƒõ≈°n√© testy: ${testsPassed}`);
console.log(`‚ùå Ne√∫spƒõ≈°n√© testy: ${testsFailed}`);
console.log(`üìä Celkov√Ω poƒçet test≈Ø: ${testsPassed + testsFailed}`);

if (failures.length > 0) {
    console.log(`\nüîç Detaily selh√°n√≠:`);
    failures.forEach((failure, index) => {
        console.log(`   ${index + 1}. ${failure}`);
    });
}

const successRate = testsPassed + testsFailed > 0 ? (testsPassed / (testsPassed + testsFailed) * 100).toFixed(1) : '0.0';
console.log(`\nüìà √öspƒõ≈°nost: ${successRate}%`);

if (testsFailed === 0) {
    console.log(`\nüéâ V≈†ECHNY TESTY PRO≈†LY!`);
    process.exit(0);
} else {
    console.log(`\n‚ö†Ô∏è  NƒöKTER√â TESTY SELHALY`);
    process.exit(1);
}