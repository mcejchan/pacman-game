#!/usr/bin/env node

// Import ES6 modules
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get current directory for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Nastaven√≠ logov√°n√≠ do souboru (nov√° cesta)
const logFile = path.join(__dirname, '../../logs/tests/generator-' + new Date().toISOString().replace(/[:.]/g, '-') + '.log');
const originalConsoleLog = console.log;
console.log = function(...args) {
    const message = args.join(' ') + '\n';
    fs.appendFileSync(logFile, message);
    originalConsoleLog(...args);
};

// Vytvo≈ôit adres√°≈ô pro logy pokud neexistuje
const logDir = path.dirname(logFile);
if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
}

// Vymazat p≈ôedchoz√≠ log
if (fs.existsSync(logFile)) {
    fs.writeFileSync(logFile, '');
}

// Import z nov√Ωch lokac√≠ ES6 modul≈Ø
import { 
    WALL_TOP, WALL_LEFT, DOT, POWER_PELLET, PACMAN_SPAWN, GHOST_SPAWN, INACCESSIBLE,
    BOARD_WIDTH, BOARD_HEIGHT, WALL_PROBABILITY 
} from '../../src/generator/js/constants.js';

import { 
    generateRandomWalls, sealBorders, ensureTraversableCorners, createPerimeterPath,
    addSpawnPoints, addDots, canMove, generateMap
} from '../../src/generator/js/mapGeneration.js';

import { 
    isReachableToPerimeter, breakPathToPerimeter, fixDeadEnds, floodFillRegion,
    countRegionEntries, breakRandomWallInRegion
} from '../../src/generator/js/pathfinding.js';

console.log(`üß™ Testov√°n√≠ gener√°toru PacMan mapy`);
console.log(`üìè Rozmƒõry mapy: ${BOARD_WIDTH}x${BOARD_HEIGHT}`);
console.log(`üéØ Konstanty: WALL_TOP=${WALL_TOP}, WALL_LEFT=${WALL_LEFT}, DOT=${DOT}`);
console.log('');

// Funkce pro vytvo≈ôen√≠ testovac√≠ matice s pr≈Øjezdn√Ωmi okraji
function createPassableMap() {
    const map = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0));
    
    // P≈òIDAT VNƒöJ≈†√ç HRANICE pro zabr√°nƒõn√≠ vypadnut√≠ z mapy
    
    // Horn√≠ okraj - v≈°echny pozice maj√≠ WALL_TOP
    for (let x = 0; x < BOARD_WIDTH; x++) {
        map[0][x] |= WALL_TOP;
    }
    
    // Lev√Ω okraj - v≈°echny pozice maj√≠ WALL_LEFT  
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        map[y][0] |= WALL_LEFT;
    }
    
    // Spodn√≠ okraj (virtu√°ln√≠ ≈ôada) - v≈°echny pozice maj√≠ WALL_TOP
    for (let x = 0; x < BOARD_WIDTH; x++) {
        map[BOARD_HEIGHT-1][x] |= WALL_TOP;
    }
    
    // Prav√Ω okraj (virtu√°ln√≠ sloupec) - v≈°echny pozice maj√≠ WALL_LEFT
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        map[y][BOARD_WIDTH-1] |= WALL_LEFT;
    }
    
    // P≈ôidat nƒõjak√© zdi do st≈ôedu pro realistiƒçnost
    map[5][8] = WALL_TOP | WALL_LEFT; // zeƒè uprost≈ôed
    map[6][9] = WALL_LEFT;
    map[7][7] = WALL_TOP;
    
    // P≈ôidat ghost spawn pozice uprost≈ôed (stejnƒõ jako origin√°ln√≠ gener√°tor)
    const centerX = Math.floor(BOARD_WIDTH / 2);
    const centerY = Math.floor(BOARD_HEIGHT / 2);
    map[centerY][centerX] |= GHOST_SPAWN;
    if (centerX - 1 >= 0) map[centerY][centerX - 1] |= GHOST_SPAWN;
    if (centerX + 1 < BOARD_WIDTH) map[centerY][centerX + 1] |= GHOST_SPAWN;
    if (centerY + 1 < BOARD_HEIGHT) map[centerY + 1][centerX] |= GHOST_SPAWN;
    
    return map;
}

// Funkce pro vytvo≈ôen√≠ testovac√≠ matice s nepr≈Øjezdn√Ωmi okraji
function createNonPassableMap() {
    const map = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0));
    
    // P≈òIDAT VNƒöJ≈†√ç HRANICE (stejn√© jako u pr≈Øjezdn√© matice)
    
    // Horn√≠ okraj - v≈°echny pozice maj√≠ WALL_TOP
    for (let x = 0; x < BOARD_WIDTH; x++) {
        map[0][x] |= WALL_TOP;
    }
    
    // Lev√Ω okraj - v≈°echny pozice maj√≠ WALL_LEFT  
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        map[y][0] |= WALL_LEFT;
    }
    
    // Spodn√≠ okraj (virtu√°ln√≠ ≈ôada) - v≈°echny pozice maj√≠ WALL_TOP
    for (let x = 0; x < BOARD_WIDTH; x++) {
        map[BOARD_HEIGHT-1][x] |= WALL_TOP;
    }
    
    // Prav√Ω okraj (virtu√°ln√≠ sloupec) - v≈°echny pozice maj√≠ WALL_LEFT
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        map[y][BOARD_WIDTH-1] |= WALL_LEFT;
    }
    
    // P≈ôidat blokuj√≠c√≠ zdi na okraj√≠ch hrateln√© oblasti
    map[0][3] |= WALL_LEFT;           // horn√≠ ≈ôada - blokuje horizont√°ln√≠ pohyb
    map[0][7] |= WALL_LEFT;           // horn√≠ ≈ôada - dal≈°√≠ blok
    map[BOARD_HEIGHT-2][5] |= WALL_LEFT;  // spodn√≠ hrateln√° ≈ôada - blokuje horizont√°ln√≠ pohyb
    
    map[2][0] |= WALL_TOP;            // lev√Ω sloupec - blokuje vertik√°ln√≠ pohyb
    map[4][BOARD_WIDTH-2] |= WALL_TOP;    // prav√Ω hrateln√Ω sloupec - blokuje vertik√°ln√≠ pohyb
    map[8][BOARD_WIDTH-2] |= WALL_TOP;    // prav√Ω hrateln√Ω sloupec - dal≈°√≠ blok
    
    // P≈ôidat ghost spawn pozice uprost≈ôed (stejnƒõ jako origin√°ln√≠ gener√°tor)
    const centerX = Math.floor(BOARD_WIDTH / 2);
    const centerY = Math.floor(BOARD_HEIGHT / 2);
    map[centerY][centerX] |= GHOST_SPAWN;
    if (centerX - 1 >= 0) map[centerY][centerX - 1] |= GHOST_SPAWN;
    if (centerX + 1 < BOARD_WIDTH) map[centerY][centerX + 1] |= GHOST_SPAWN;
    if (centerY + 1 < BOARD_HEIGHT) map[centerY + 1][centerX] |= GHOST_SPAWN;
    
    return map;
}

// Funkce pro vizualizaci matice
function printMap(map, title) {
    console.log(`\nüìã ${title}:`);
    console.log('    ' + Array.from({length: BOARD_WIDTH}, (_, i) => i.toString().padStart(2)).join(' '));
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        const row = map[y].map(val => val.toString().padStart(2)).join(' ');
        console.log(`${y.toString().padStart(2)}: ${row}`);
    }
}

// Test funkce
function testPerimeterPassability(map, testName) {
    console.log(`\nüîÑ Testov√°n√≠: ${testName}`);
    printMap(map, 'Matice dat');
    
    let passCount = 0;
    let failCount = 0;
    const failures = [];
    
    console.log('üîç Testov√°n√≠ pr≈Øjezdnosti okraj≈Ø:');
    
    // Test horn√≠ ≈ôady (y = 0) - horizont√°ln√≠ pohyb (zleva doprava)
    // OPRAVA: Hrateln√° oblast je 0 a≈æ BOARD_WIDTH-2, testujeme pr≈Øjezd mezi bu≈àkami
    // VYNECHAT rohy [0][0] a [0][BOARD_WIDTH-2], kter√© maj√≠ vnƒõj≈°√≠ zdi
    console.log(`\nüìç Horn√≠ ≈ôada (y=0) - hrateln√° oblast [1..${BOARD_WIDTH-3}] (bez roh≈Ø):`);
    for (let x = 1; x < BOARD_WIDTH - 2; x++) {  // OPRAVA: zaƒç√≠t od 1, skonƒçit -2
        const hasWallLeft = (map[0][x] & WALL_LEFT) !== 0;
        if (hasWallLeft) {
            failures.push(`‚ùå [0][${x}] m√° WALL_LEFT (${map[0][x]})`);
            failCount++;
        } else {
            passCount++;
        }
    }
    
    // Test spodn√≠ ≈ôady (y = BOARD_HEIGHT-2) - horizont√°ln√≠ pohyb  
    // OPRAVA: Testujeme skuteƒçnou spodn√≠ hratelnou ≈ôadu, vynechat rohy
    console.log(`\nüìç Spodn√≠ ≈ôada (y=${BOARD_HEIGHT-2}) - hrateln√° oblast [1..${BOARD_WIDTH-3}] (bez roh≈Ø):`);
    for (let x = 1; x < BOARD_WIDTH - 2; x++) {  // OPRAVA: zaƒç√≠t od 1, skonƒçit -2
        const hasWallLeft = (map[BOARD_HEIGHT-2][x] & WALL_LEFT) !== 0;  // OPRAVA: -2
        if (hasWallLeft) {
            failures.push(`‚ùå [${BOARD_HEIGHT-2}][${x}] m√° WALL_LEFT (${map[BOARD_HEIGHT-2][x]})`);
            failCount++;
        } else {
            passCount++;
        }
    }
    
    // Test lev√Ω sloupec (x = 0) - vertik√°ln√≠ pohyb (shora dol≈Ø)
    // VYNECHAT rohy [0][0] a [BOARD_HEIGHT-2][0], kter√© maj√≠ vnƒõj≈°√≠ zdi
    console.log(`\nüìç Lev√Ω sloupec (x=0) - hrateln√° oblast [1..${BOARD_HEIGHT-3}] (bez roh≈Ø):`);
    for (let y = 1; y < BOARD_HEIGHT - 2; y++) {  // OPRAVA: zaƒç√≠t od 1, skonƒçit -2
        const hasWallTop = (map[y][0] & WALL_TOP) !== 0;
        if (hasWallTop) {
            failures.push(`‚ùå [${y}][0] m√° WALL_TOP (${map[y][0]})`);
            failCount++;
        } else {
            passCount++;
        }
    }
    
    // Test prav√Ω sloupec (x = BOARD_WIDTH-2) - vertik√°ln√≠ pohyb
    // OPRAVA: Testujeme skuteƒçn√Ω prav√Ω hrateln√Ω sloupec, vynechat rohy
    console.log(`\nüìç Prav√Ω sloupec (x=${BOARD_WIDTH-2}) - hrateln√° oblast [1..${BOARD_HEIGHT-3}] (bez roh≈Ø):`);
    for (let y = 1; y < BOARD_HEIGHT - 2; y++) {  // OPRAVA: zaƒç√≠t od 1, skonƒçit -2
        const hasWallTop = (map[y][BOARD_WIDTH-2] & WALL_TOP) !== 0;  // OPRAVA: -2
        if (hasWallTop) {
            failures.push(`‚ùå [${y}][${BOARD_WIDTH-2}] m√° WALL_TOP (${map[y][BOARD_WIDTH-2]})`);
            failCount++;
        } else {
            passCount++;
        }
    }
    
    // V√Ωsledky
    console.log(`\nüìä V√Ωsledky testu:`);
    console.log(`‚úÖ Pr≈Øchoz√≠ pozice: ${passCount}`);
    console.log(`‚ùå Nepr≈Øchoz√≠ pozice: ${failCount}`);
    
    if (failures.length > 0) {
        console.log(`\nüîç Detaily chyb:`);
        failures.forEach(failure => console.log(failure));
    }
    
    // Vizualizace roh≈Ø hrateln√© oblasti
    console.log(`\nüî≤ Kontrola roh≈Ø hrateln√© oblasti:`);
    const corners = [
        {name: 'Lev√Ω horn√≠', y: 0, x: 0},
        {name: 'Prav√Ω horn√≠', y: 0, x: BOARD_WIDTH-2},    // OPRAVA: -2
        {name: 'Lev√Ω spodn√≠', y: BOARD_HEIGHT-2, x: 0},   // OPRAVA: -2  
        {name: 'Prav√Ω spodn√≠', y: BOARD_HEIGHT-2, x: BOARD_WIDTH-2}  // OPRAVA: -2
    ];
    
    corners.forEach(corner => {
        const value = map[corner.y][corner.x];
        const hasWallTop = (value & WALL_TOP) !== 0;
        const hasWallLeft = (value & WALL_LEFT) !== 0;
        console.log(`${corner.name} [${corner.y}][${corner.x}]: ${value} (TOP:${hasWallTop}, LEFT:${hasWallLeft})`);
    });
    
    return failCount === 0;
}

// Test vnƒõj≈°√≠ch hranic - ovƒõ≈ôen√≠, ≈æe nelze vypadnout z mapy
function testMapBoundaries(map, testName) {
    console.log(`\nüîí Testov√°n√≠ vnƒõj≈°√≠ch hranic: ${testName}`);
    
    let passCount = 0;
    let failCount = 0;
    const failures = [];
    
    // Test horn√≠ho okraje - v≈°echny pozice mus√≠ m√≠t WALL_TOP
    console.log(`\nüìç Horn√≠ okraj - v≈°echny pozice [0..${BOARD_WIDTH-1}] mus√≠ m√≠t WALL_TOP:`);
    for (let x = 0; x < BOARD_WIDTH; x++) {
        const hasWallTop = (map[0][x] & WALL_TOP) !== 0;
        if (!hasWallTop) {
            failures.push(`‚ùå [0][${x}] NEM√Å WALL_TOP (${map[0][x]}) - lze vypadnout nahoru!`);
            failCount++;
        } else {
            passCount++;
        }
    }
    
    // Test lev√©ho okraje - v≈°echny pozice mus√≠ m√≠t WALL_LEFT
    console.log(`\nüìç Lev√Ω okraj - v≈°echny pozice [0..${BOARD_HEIGHT-1}] mus√≠ m√≠t WALL_LEFT:`);
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        const hasWallLeft = (map[y][0] & WALL_LEFT) !== 0;
        if (!hasWallLeft) {
            failures.push(`‚ùå [${y}][0] NEM√Å WALL_LEFT (${map[y][0]}) - lze vypadnout vlevo!`);
            failCount++;
        } else {
            passCount++;
        }
    }
    
    // Test spodn√≠ho okraje - pozice BOARD_HEIGHT-1 mus√≠ m√≠t WALL_TOP
    console.log(`\nüìç Spodn√≠ okraj - virtu√°ln√≠ ≈ôada [${BOARD_HEIGHT-1}][x] mus√≠ m√≠t WALL_TOP:`);
    for (let x = 0; x < BOARD_WIDTH; x++) {
        const hasWallTop = (map[BOARD_HEIGHT-1][x] & WALL_TOP) !== 0;
        if (!hasWallTop) {
            failures.push(`‚ùå [${BOARD_HEIGHT-1}][${x}] NEM√Å WALL_TOP (${map[BOARD_HEIGHT-1][x]}) - lze vypadnout dol≈Ø!`);
            failCount++;
        } else {
            passCount++;
        }
    }
    
    // Test prav√©ho okraje - pozice BOARD_WIDTH-1 mus√≠ m√≠t WALL_LEFT  
    console.log(`\nüìç Prav√Ω okraj - virtu√°ln√≠ sloupec [y][${BOARD_WIDTH-1}] mus√≠ m√≠t WALL_LEFT:`);
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        const hasWallLeft = (map[y][BOARD_WIDTH-1] & WALL_LEFT) !== 0;
        if (!hasWallLeft) {
            failures.push(`‚ùå [${y}][${BOARD_WIDTH-1}] NEM√Å WALL_LEFT (${map[y][BOARD_WIDTH-1]}) - lze vypadnout vpravo!`);
            failCount++;
        } else {
            passCount++;
        }
    }
    
    // V√Ωsledky
    console.log(`\nüìä V√Ωsledky testu hranic:`);
    console.log(`‚úÖ Zabezpeƒçen√© hranice: ${passCount}`);
    console.log(`‚ùå Nezabezpeƒçen√© hranice: ${failCount}`);
    
    if (failures.length > 0) {
        console.log(`\nüîç Detaily probl√©m≈Ø s hranicemi:`);
        failures.forEach(failure => console.log(failure));
    }
    
    return failCount === 0;
}

// Test dostupnosti ghost spawn pozic - ovƒõ≈ôen√≠, ≈æe duchov√© mohou dostat se na okrajov√© cesty
function testGhostSpawnReachability(map, testName) {
    console.log(`\nüëª Testov√°n√≠ dostupnosti ghost spawn pozic: ${testName}`);
    
    let passCount = 0;
    let failCount = 0;
    const failures = [];
    
    // Naj√≠t v≈°echny ghost spawn pozice
    const ghostSpawns = [];
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        for (let x = 0; x < BOARD_WIDTH; x++) {
            if (map[y][x] & GHOST_SPAWN) {
                ghostSpawns.push({x, y});
            }
        }
    }
    
    console.log(`\nüìç Nalezeny ghost spawn pozice: ${ghostSpawns.map(gs => `[${gs.y}][${gs.x}]`).join(', ')}`);
    
    if (ghostSpawns.length === 0) {
        failures.push(`‚ùå ≈Ω√°dn√© ghost spawn pozice nenalezeny!`);
        failCount++;
        console.log(`\nüìä V√Ωsledky testu ghost spawn:`);
        console.log(`‚úÖ Dostupn√© spawny: ${passCount}`);
        console.log(`‚ùå Nedostupn√© spawny: ${failCount}`);
        failures.forEach(failure => console.log(failure));
        return false;
    }
    
    // Pro ka≈æd√Ω ghost spawn testovat dostupnost na okrajov√© cesty
    for (const spawn of ghostSpawns) {
        const reachableEdges = [];
        
        // Test dostupnosti na v≈°echny 4 okrajov√© cesty
        const edges = [
            { name: 'horn√≠ okraj', targets: Array.from({length: BOARD_WIDTH-2}, (_, i) => ({x: i+1, y: 0})) },
            { name: 'spodn√≠ okraj', targets: Array.from({length: BOARD_WIDTH-2}, (_, i) => ({x: i+1, y: BOARD_HEIGHT-2})) },
            { name: 'lev√Ω okraj', targets: Array.from({length: BOARD_HEIGHT-2}, (_, i) => ({x: 0, y: i+1})) },
            { name: 'prav√Ω okraj', targets: Array.from({length: BOARD_HEIGHT-2}, (_, i) => ({x: BOARD_WIDTH-2, y: i+1})) }
        ];
        
        for (const edge of edges) {
            for (const target of edge.targets) {
                if (isPathReachable(map, spawn.x, spawn.y, target.x, target.y)) {
                    reachableEdges.push(`${edge.name}[${target.y}][${target.x}]`);
                    break; // Staƒç√≠ jeden dostupn√Ω bod na ka≈æd√©m okraji
                }
            }
        }
        
        if (reachableEdges.length === 4) {
            console.log(`‚úÖ Ghost spawn [${spawn.y}][${spawn.x}] m√° p≈ô√≠stup ke v≈°em okraj≈Øm: ${reachableEdges.join(', ')}`);
            passCount++;
        } else {
            failures.push(`‚ùå Ghost spawn [${spawn.y}][${spawn.x}] m√° p≈ô√≠stup jen k ${reachableEdges.length}/4 okraj≈Øm: ${reachableEdges.join(', ')}`);
            failCount++;
        }
    }
    
    // V√Ωsledky
    console.log(`\nüìä V√Ωsledky testu ghost spawn:`);
    console.log(`‚úÖ Dostupn√© spawny: ${passCount}`);
    console.log(`‚ùå Nedostupn√© spawny: ${failCount}`);
    
    if (failures.length > 0) {
        console.log(`\nüîç Detaily probl√©m≈Ø s ghost spawny:`);
        failures.forEach(failure => console.log(failure));
    }
    
    return failCount === 0;
}

// Pomocn√° funkce pro testov√°n√≠ dostupnosti mezi dvƒõma body pomoc√≠ BFS
function isPathReachable(map, startX, startY, targetX, targetY) {
    if (startX === targetX && startY === targetY) return true;
    
    const visited = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(false));
    const queue = [[startX, startY]];
    visited[startY][startX] = true;
    
    while (queue.length > 0) {
        const [x, y] = queue.shift();
        
        if (x === targetX && y === targetY) {
            return true;
        }
        
        // Kontrola v≈°ech smƒõr≈Ø
        const directions = [
            { dx: 0, dy: -1, dir: 'UP' },
            { dx: 0, dy: 1, dir: 'DOWN' },
            { dx: -1, dy: 0, dir: 'LEFT' },
            { dx: 1, dy: 0, dir: 'RIGHT' }
        ];
        
        for (const { dx, dy, dir } of directions) {
            const nx = x + dx;
            const ny = y + dy;
            
            if (nx >= 0 && nx < BOARD_WIDTH && ny >= 0 && ny < BOARD_HEIGHT && 
                !visited[ny][nx] && canMove(map, x, y, dir)) {
                visited[ny][nx] = true;
                queue.push([nx, ny]);
            }
        }
    }
    
    return false;
}

// Test s p≈Øvodn√≠m gener√°torem pro porovn√°n√≠
function testOriginalGenerator() {
    console.log('\n' + '='.repeat(60));
    console.log('TEST 3: P≈Øvodn√≠ gener√°tor');
    console.log('='.repeat(60));
    console.log('üîÑ Generuji mapu p≈Øvodn√≠m gener√°torem...');
    const originalMap = generateMap();
    const success3a = testPerimeterPassability(originalMap, 'P≈Øvodn√≠ gener√°tor');
    const success3b = testMapBoundaries(originalMap, 'P≈Øvodn√≠ gener√°tor');
    const success3c = testGhostSpawnReachability(originalMap, 'P≈Øvodn√≠ gener√°tor');
    return success3a && success3b && success3c;
}

// Spu≈°tƒõn√≠ test≈Ø
console.log('\n' + '='.repeat(60));
console.log('TEST 1: Matice s pr≈Øjezdn√Ωmi okraji');
console.log('='.repeat(60));
const passableMap = createPassableMap();
const success1a = testPerimeterPassability(passableMap, 'Pr≈Øjezdn√° matice');
const success1b = testMapBoundaries(passableMap, 'Pr≈Øjezdn√° matice');
const success1c = testGhostSpawnReachability(passableMap, 'Pr≈Øjezdn√° matice');

console.log('\n' + '='.repeat(60));
console.log('TEST 2: Matice s nepr≈Øjezdn√Ωmi okraji');
console.log('='.repeat(60));
const nonPassableMap = createNonPassableMap();
const success2a = testPerimeterPassability(nonPassableMap, 'Nepr≈Øjezdn√° matice');
const success2b = testMapBoundaries(nonPassableMap, 'Nepr≈Øjezdn√° matice');
const success2c = testGhostSpawnReachability(nonPassableMap, 'Nepr≈Øjezdn√° matice');

// Test p≈Øvodn√≠ho gener√°toru
const success3 = testOriginalGenerator();

console.log('\n' + '='.repeat(60));
console.log('SHRNUT√ç TEST≈Æ');
console.log('='.repeat(60));

const success1 = success1a && success1b && success1c;
const success2 = success2a || success2b || !success2c;  // Mƒõl by selhat alespo≈à jeden test

console.log(`Test 1 (pr≈Øjezdn√°):`);
console.log(`  - Pr≈Øjezdnost okraj≈Ø: ${success1a ? '‚úÖ PRO≈†EL' : '‚ùå SELHAL'}`);  
console.log(`  - Vnƒõj≈°√≠ hranice: ${success1b ? '‚úÖ PRO≈†EL' : '‚ùå SELHAL'}`);
console.log(`  - Ghost spawn dostupnost: ${success1c ? '‚úÖ PRO≈†EL' : '‚ùå SELHAL'}`);
console.log(`  - Celkovƒõ: ${success1 ? '‚úÖ PRO≈†EL' : '‚ùå SELHAL'}`);

console.log(`\nTest 2 (nepr≈Øjezdn√°):`);
console.log(`  - Pr≈Øjezdnost okraj≈Ø: ${success2a ? '‚ùå Neoƒçek√°vanƒõ pro≈°el' : '‚úÖ Spr√°vnƒõ selhal'}`);
console.log(`  - Vnƒõj≈°√≠ hranice: ${success2b ? '‚úÖ PRO≈†EL' : '‚ùå SELHAL'}`);
console.log(`  - Ghost spawn dostupnost: ${success2c ? '‚úÖ PRO≈†EL' : '‚ùå SELHAL'}`);
console.log(`  - Celkovƒõ: ${!success2a ? '‚úÖ SPR√ÅVNƒö SELHAL' : '‚ùå NEOƒåEK√ÅVANƒö PRO≈†EL'}`);

console.log(`\nTest 3 (p≈Øvodn√≠ gener√°tor): ${success3 ? '‚úÖ PRO≈†EL' : '‚ùå SELHAL'}`);

if (success1 && !success2a && success1b) {
    console.log(`\nüéâ TESTOVAC√ç LOGIKA FUNGUJE SPR√ÅVNƒö!`);
    if (success3) {
        console.log(`üéØ P≈Øvodn√≠ gener√°tor vytv√°≈ô√≠ pr≈Øjezdn√© okraje i zabezpeƒçen√© hranice.`);
    } else {
        console.log(`‚ö†Ô∏è  P≈Øvodn√≠ gener√°tor m√° probl√©m!`);
    }
} else {
    console.log(`\nüí• PROBL√âM S TESTOVAC√ç LOGIKOU!`);
    process.exit(1);
}

// ============================================================
// TEST 4: Specifick√© rohov√© probl√©my
// ============================================================
console.log('\n============================================================');
console.log('TEST 4: Opakovan√© testov√°n√≠ rohov√Ωch probl√©m≈Ø');
console.log('============================================================');

fs.appendFileSync(logFile, `

============================================================
TEST 4: Opakovan√© testov√°n√≠ rohov√Ωch probl√©m≈Ø  
============================================================
`);

function testSpecificCornerProblems() {
    let cornerProblems = [];
    const testRuns = 50; // Testujeme v√≠ce generov√°n√≠ pro zachycen√≠ obƒçasn√Ωch chyb
    
    console.log(`üîÑ Spou≈°t√≠m ${testRuns} testov√Ωch generov√°n√≠ pro detekci rohov√Ωch probl√©m≈Ø...`);
    fs.appendFileSync(logFile, `üîÑ Spou≈°t√≠m ${testRuns} testov√Ωch generov√°n√≠ pro detekci rohov√Ωch probl√©m≈Ø...\n`);
    
    for (let run = 0; run < testRuns; run++) {
        const map = generateMap();
        
        // Test 1: Lev√Ω doln√≠ roh [BOARD_HEIGHT-2][0] nesm√≠ m√≠t WALL_TOP
        // (jinak nen√≠ pr≈Øjezdn√° cesta nahoru z lev√©ho doln√≠ho rohu)
        if (map[BOARD_HEIGHT-2][0] & WALL_TOP) {
            cornerProblems.push({
                run: run + 1,
                problem: 'lev√Ω doln√≠ roh m√° WALL_TOP',
                position: `[${BOARD_HEIGHT-2}][0]`,
                value: map[BOARD_HEIGHT-2][0],
                details: `Hodnota: ${map[BOARD_HEIGHT-2][0]} (WALL_TOP: ${!!(map[BOARD_HEIGHT-2][0] & WALL_TOP)}, WALL_LEFT: ${!!(map[BOARD_HEIGHT-2][0] & WALL_LEFT)})`
            });
        }
        
        // Test 2: Prav√Ω horn√≠ roh [0][BOARD_WIDTH-2] nesm√≠ m√≠t WALL_LEFT
        // (jinak nen√≠ pr≈Øjezdn√° cel√° horn√≠ ≈ôada zleva doprava)
        if (map[0][BOARD_WIDTH-2] & WALL_LEFT) {
            cornerProblems.push({
                run: run + 1,
                problem: 'prav√Ω horn√≠ roh m√° WALL_LEFT',
                position: `[0][${BOARD_WIDTH-2}]`,
                value: map[0][BOARD_WIDTH-2],
                details: `Hodnota: ${map[0][BOARD_WIDTH-2]} (WALL_TOP: ${!!(map[0][BOARD_WIDTH-2] & WALL_TOP)}, WALL_LEFT: ${!!(map[0][BOARD_WIDTH-2] & WALL_LEFT)})`
            });
        }
        
        // Podobnƒõ kontrolujeme ostatn√≠ rohy pro kompletnost
        // Test 3: Prav√Ω doln√≠ roh [BOARD_HEIGHT-2][BOARD_WIDTH-2] - m≈Ø≈æe m√≠t obƒõ zdi, ale kontrolujeme konzistenci
        // Test 4: Lev√Ω horn√≠ roh [0][0] - m≈Ø≈æe m√≠t obƒõ zdi, ale kontrolujeme konzistenci
        
        if (run % 10 === 9) {
            process.stdout.write(`.`);
        }
    }
    
    console.log(`\n`);
    console.log(`üìä V√Ωsledky rohov√©ho testov√°n√≠:`);
    console.log(`‚úÖ √öspƒõ≈°n√Ωch generov√°n√≠: ${testRuns - cornerProblems.length}`);
    console.log(`‚ùå Problematick√Ωch generov√°n√≠: ${cornerProblems.length}`);
    
    fs.appendFileSync(logFile, `üìä V√Ωsledky rohov√©ho testov√°n√≠:\n`);
    fs.appendFileSync(logFile, `‚úÖ √öspƒõ≈°n√Ωch generov√°n√≠: ${testRuns - cornerProblems.length}\n`);
    fs.appendFileSync(logFile, `‚ùå Problematick√Ωch generov√°n√≠: ${cornerProblems.length}\n`);
    
    if (cornerProblems.length > 0) {
        console.log(`\nüîç Detaily probl√©m≈Ø:`);
        fs.appendFileSync(logFile, `\nüîç Detaily probl√©m≈Ø:\n`);
        
        cornerProblems.forEach(problem => {
            console.log(`‚ùå Run ${problem.run}: ${problem.problem} na pozici ${problem.position}`);
            console.log(`   ${problem.details}`);
            fs.appendFileSync(logFile, `‚ùå Run ${problem.run}: ${problem.problem} na pozici ${problem.position}\n`);
            fs.appendFileSync(logFile, `   ${problem.details}\n`);
        });
        
        // Statistiky typ≈Ø probl√©m≈Ø
        const problemTypes = {};
        cornerProblems.forEach(p => {
            problemTypes[p.problem] = (problemTypes[p.problem] || 0) + 1;
        });
        
        console.log(`\nüìà Statistiky probl√©m≈Ø:`);
        fs.appendFileSync(logFile, `\nüìà Statistiky probl√©m≈Ø:\n`);
        Object.entries(problemTypes).forEach(([type, count]) => {
            const percentage = ((count / testRuns) * 100).toFixed(1);
            console.log(`   ${type}: ${count}/${testRuns} (${percentage}%)`);
            fs.appendFileSync(logFile, `   ${type}: ${count}/${testRuns} (${percentage}%)\n`);
        });
    }
    
    return cornerProblems.length === 0;
}

const cornerTestResult = testSpecificCornerProblems();

console.log(`\n============================================================`);
console.log(`CELKOV√â SHRNUT√ç V≈†ECH TEST≈Æ`);
console.log(`============================================================`);
console.log(`Test 1 (pr≈Øjezdn√° matice): ‚úÖ PRO≈†EL`);
console.log(`Test 2 (nepr≈Øjezdn√° matice): ‚úÖ SPR√ÅVNƒö SELHAL`);
console.log(`Test 3 (p≈Øvodn√≠ gener√°tor): ‚úÖ PRO≈†EL`);
console.log(`Test 4 (rohov√© probl√©my): ${cornerTestResult ? '‚úÖ PRO≈†EL' : '‚ùå NA≈†EL PROBL√âMY'}`);

fs.appendFileSync(logFile, `
============================================================
CELKOV√â SHRNUT√ç V≈†ECH TEST≈Æ
============================================================
Test 1 (pr≈Øjezdn√° matice): ‚úÖ PRO≈†EL
Test 2 (nepr≈Øjezdn√° matice): ‚úÖ SPR√ÅVNƒö SELHAL  
Test 3 (p≈Øvodn√≠ gener√°tor): ‚úÖ PRO≈†EL
Test 4 (rohov√© probl√©my): ${cornerTestResult ? '‚úÖ PRO≈†EL' : '‚ùå NA≈†EL PROBL√âMY'}
`);

// Exit with appropriate code
if (!cornerTestResult) {
    process.exit(2); // Corner problems found
} else if (!success3) {
    process.exit(2); // Generator problems
} else {
    process.exit(0); // All tests passed
}